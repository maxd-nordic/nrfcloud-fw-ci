name: Build

on:
  workflow_dispatch:
    inputs:
      stage:
        description: 'Stage to build'
        required: true
        default: 'prod'
        type: string
      ncs-commit:
        description: 'NCS commit to build'
        required: false
        default: 'main'
        type: string
  workflow_call:
    inputs:
      stage:
        description: 'Stage to build'
        required: true
        default: 'prod'
        type: string
      ncs-commit:
        description: 'NCS commit to build'
        required: false
        default: 'main'
        type: string
    outputs:
      run_id:
        description: The run ID of the workflow to fetch artifacts from
        value: ${{ jobs.build.outputs.run_id }}
      version:
        description: The version of the firmware built on this run_id
        value: ${{ jobs.build.outputs.version }}

jobs:
  build:
    runs-on: build_self_hosted
    container: ghcr.io/zephyrproject-rtos/ci:v0.27.4
    env:
      CMAKE_PREFIX_PATH: /opt/toolchains
    outputs:
      run_id: ${{ github.run_id }}
      version: ${{ env.VERSION }}
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Checkout CI
        uses: actions/checkout@v4
        with:
          path: nrf-cloud-fw-ci

      - name: Checkout NRF
        uses: actions/checkout@v4
        with:
          repository: nrfconnect/sdk-nrf
          ref: ${{ inputs.ncs-commit || github.event.inputs.ncs-commit }}
          path: nrf

      - name: Set BUILD_WORKFLOW_SHA
        working-directory: nrf-cloud-fw-ci
        run: echo "BUILD_WORKFLOW_SHA=$(sha256sum .github/workflows/build.yml | cut -c1-8)" >> $GITHUB_ENV

      - name: Set VERSION environment variable
        working-directory: nrf
        run: |
          NRFSDK_SHA=$(git rev-parse HEAD)
          echo "VERSION=${{ env.BUILD_WORKFLOW_SHA }}-$NRFSDK_SHA-${{ inputs.stage || github.event.inputs.stage }}" >> $GITHUB_ENV

      - name: Check if build exists in cache
        id: cache-check
        run: |
          if [ -d "artifact-cache/build-${{ env.VERSION }}" ]; then
            echo "cache-hit=true" >> $GITHUB_OUTPUT
            echo "Build ${{ env.VERSION }} found in cache, skipping build steps"
          else
            echo "cache-hit=false" >> $GITHUB_OUTPUT
            echo "Build ${{ env.VERSION }} not found in cache, proceeding with build"
          fi

      - name: Restore from cache
        if: steps.cache-check.outputs.cache-hit == 'true'
        run: |
          mkdir -p build-${{ env.VERSION }}
          cp -r artifact-cache/build-${{ env.VERSION }}/* build-${{ env.VERSION }}/
          echo "Restored build ${{ env.VERSION }} from cache"

      - name: Initialize Workspace
        if: steps.cache-check.outputs.cache-hit == 'false'
        working-directory: nrf
        run: |
          if [ ! -d "../.west" ]; then
            west init -l .
          else
            echo ".west folder already exists, skipping west init."
          fi
          west update -o=--depth=1 -n
          west blobs fetch hal_nordic

      - name: Install dependencies
        if: steps.cache-check.outputs.cache-hit == 'false'
        run: |
          # The Matter IDL is part of requirements-build.txt, but it's not available
          # in pypi so we need to install it from the source code
          MATTER_IDL_PATH=modules/lib/matter/scripts/py_matter_idl
          if [ -d $MATTER_IDL_PATH ]; then
            pip install -e $MATTER_IDL_PATH
          fi
          pip install -r nrf/scripts/requirements-build.txt
          rm -rf artifacts
          mkdir -p artifacts

      - name: Create Build Folders
        if: steps.cache-check.outputs.cache-hit == 'false'
        run: |
          rm -rf build*
          mkdir -p build-${{ env.VERSION }}

      - name: Build CoAP samples
        if: steps.cache-check.outputs.cache-hit == 'false'
        run: |
          CI_CONFIG_FRAGMENT=$PWD/nrf-cloud-fw-ci/config_fragments/coap_${{ inputs.stage || github.event.inputs.stage }}.conf
          BOARD=thingy91x/nrf9151/ns
          west build -b $BOARD --build-dir build-${{ env.VERSION }}/t91x/nrf_cloud_coap_device_message   nrf/samples/cellular/nrf_cloud_coap_device_message  -- -DEXTRA_CONF_FILE=$CI_CONFIG_FRAGMENT
          west build -b $BOARD --build-dir build-${{ env.VERSION }}/t91x/nrf_cloud_coap_cell_location    nrf/samples/cellular/nrf_cloud_coap_cell_location   -- -DEXTRA_CONF_FILE=$CI_CONFIG_FRAGMENT
          west build -b $BOARD --build-dir build-${{ env.VERSION }}/t91x/nrf_cloud_coap_fota             nrf/samples/cellular/nrf_cloud_coap_fota            -- -DEXTRA_CONF_FILE=$CI_CONFIG_FRAGMENT
          west build -b $BOARD --build-dir build-${{ env.VERSION }}/t91x/nrf_cloud_coap_fota_fmfu        nrf/samples/cellular/nrf_cloud_coap_fota            -- -DEXTRA_CONF_FILE="full_modem_fota.conf;$CI_CONFIG_FRAGMENT"

      - name: Create Artifact bundle
        if: steps.cache-check.outputs.cache-hit == 'false'
        working-directory: build-${{ env.VERSION }}
        run: |
          mkdir -p artifacts/t91x/nrf_cloud_coap_device_message
          cp t91x/nrf_cloud_coap_device_message/dfu_application.zip artifacts/t91x/nrf_cloud_coap_device_message/
          cp t91x/nrf_cloud_coap_device_message/partitions.yml artifacts/t91x/nrf_cloud_coap_device_message/
          for file in zephyr.signed.hex .config zephyr.dts; do
                cp t91x/nrf_cloud_coap_device_message/nrf_cloud_coap_device_message/zephyr/$file artifacts/t91x/nrf_cloud_coap_device_message/
                done

          mkdir -p artifacts/t91x/nrf_cloud_coap_cell_location
          cp t91x/nrf_cloud_coap_cell_location/dfu_application.zip artifacts/t91x/nrf_cloud_coap_cell_location/
          cp t91x/nrf_cloud_coap_cell_location/partitions.yml artifacts/t91x/nrf_cloud_coap_cell_location/
          for file in zephyr.signed.hex .config zephyr.dts; do
                cp t91x/nrf_cloud_coap_cell_location/nrf_cloud_coap_cell_location/zephyr/$file artifacts/t91x/nrf_cloud_coap_cell_location/
                done

          mkdir -p artifacts/t91x/nrf_cloud_coap_fota
          cp t91x/nrf_cloud_coap_fota/dfu_application.zip artifacts/t91x/nrf_cloud_coap_fota/
          cp t91x/nrf_cloud_coap_fota/partitions.yml artifacts/t91x/nrf_cloud_coap_fota/
          for file in zephyr.signed.hex .config zephyr.dts; do
                cp t91x/nrf_cloud_coap_fota/nrf_cloud_coap_fota/zephyr/$file artifacts/t91x/nrf_cloud_coap_fota/
                done

          mkdir -p artifacts/t91x/nrf_cloud_coap_fota_fmfu
          cp t91x/nrf_cloud_coap_fota_fmfu/dfu_application.zip artifacts/t91x/nrf_cloud_coap_fota_fmfu/
          cp t91x/nrf_cloud_coap_fota_fmfu/partitions.yml artifacts/t91x/nrf_cloud_coap_fota_fmfu/
          for file in zephyr.signed.hex .config zephyr.dts; do
                cp t91x/nrf_cloud_coap_fota_fmfu/nrf_cloud_coap_fota/zephyr/$file artifacts/t91x/nrf_cloud_coap_fota_fmfu/
                done

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ env.VERSION }}
          path: build-${{ env.VERSION }}/artifacts

      # copy artifacts to cache, make sure only 10 builds are cached at the same time
      - name: Cache Artifacts
        if: steps.cache-check.outputs.cache-hit == 'false'
        run: |
          mkdir -p artifact-cache
          ls -dt artifact-cache/*/ 2>/dev/null | tail -n +10 | xargs -d '\n' rm -rf -- 2>/dev/null || true
          cp -r build-${{ env.VERSION }}/artifacts artifact-cache/build-${{ env.VERSION }}
