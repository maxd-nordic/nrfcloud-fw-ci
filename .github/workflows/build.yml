name: Build

on:
  workflow_dispatch:
    inputs:
      stage:
        description: 'Stage to build'
        required: true
        default: 'prod'
        type: string
      ncs-commit:
        description: 'NCS commit to build'
        required: false
        default: 'main'
        type: string
  workflow_call:
    inputs:
      stage:
        description: 'Stage to build'
        required: true
        default: 'prod'
        type: string
      ncs-commit:
        description: 'NCS commit to build'
        required: false
        default: 'main'
        type: string
    outputs:
      run_id:
        description: The run ID of the workflow to fetch artifacts from
        value: ${{ jobs.build.outputs.run_id }}
      version:
        description: The version of the firmware built on this run_id
        value: ${{ jobs.build.outputs.version }}

jobs:
  build:
    runs-on: build_self_hosted
    container: ghcr.io/zephyrproject-rtos/ci:v0.27.4
    env:
      CMAKE_PREFIX_PATH: /opt/toolchains
    outputs:
      run_id: ${{ github.run_id }}
      version: ${{ env.VERSION }}
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Checkout CI
        uses: actions/checkout@v4
        with:
          path: nrf-cloud-fw-ci

      - name: Checkout NRF
        uses: actions/checkout@v4
        with:
          repository: nrfconnect/sdk-nrf
          ref: ${{ inputs.ncs-commit || github.event.inputs.ncs-commit }}
          path: nrf

      - name: Set BUILD_WORKFLOW_SHA
        working-directory: nrf-cloud-fw-ci
        run: echo "BUILD_WORKFLOW_SHA=$(sha256sum .github/workflows/build.yml | cut -c1-8)" >> $GITHUB_ENV

      - name: Set VERSION environment variable
        working-directory: nrf
        run: |
          NRFSDK_SHA=$(git rev-parse HEAD)
          echo "VERSION=${{ env.BUILD_WORKFLOW_SHA }}-$NRFSDK_SHA-${{ inputs.stage || github.event.inputs.stage }}" >> $GITHUB_ENV

      - name: Check if build exists in cache
        id: cache-check
        run: |
          if [ -d "artifact-cache/build-${{ env.VERSION }}" ]; then
            echo "cache-hit=true" >> $GITHUB_OUTPUT
            echo "Build ${{ env.VERSION }} found in cache, skipping build steps"
          else
            echo "cache-hit=false" >> $GITHUB_OUTPUT
            echo "Build ${{ env.VERSION }} not found in cache, proceeding with build"
          fi

      - name: Restore from cache
        if: steps.cache-check.outputs.cache-hit == 'true'
        run: |
          mkdir -p build-${{ env.VERSION }}
          cp -r artifact-cache/build-${{ env.VERSION }}/* build-${{ env.VERSION }}/
          echo "Restored build ${{ env.VERSION }} from cache"

      - name: Initialize Workspace
        if: steps.cache-check.outputs.cache-hit == 'false'
        working-directory: nrf
        run: |
          if [ ! -d "../.west" ]; then
            west init -l .
          else
            echo ".west folder already exists, skipping west init."
          fi
          west update -o=--depth=1 -n
          west blobs fetch hal_nordic

      - name: Install dependencies
        if: steps.cache-check.outputs.cache-hit == 'false'
        run: |
          # The Matter IDL is part of requirements-build.txt, but it's not available
          # in pypi so we need to install it from the source code
          MATTER_IDL_PATH=modules/lib/matter/scripts/py_matter_idl
          if [ -d $MATTER_IDL_PATH ]; then
            pip install -e $MATTER_IDL_PATH
          fi
          pip install -r nrf/scripts/requirements-build.txt
          rm -rf artifacts
          mkdir -p artifacts

      - name: Prepare build folder
        if: steps.cache-check.outputs.cache-hit == 'false'
        run: |
          rm -rf build*
          mkdir -p build-${{ env.VERSION }}

      - name: Build CoAP samples
        if: steps.cache-check.outputs.cache-hit == 'false'
        run: |
          # Declare fragments
          FRAGMENT_DIR=$PWD/nrf-cloud-fw-ci/config_fragments/
          CI_CONFIG_FRAGMENT=$FRAGMENT_DIR/stages_general/coap_${{ inputs.stage || github.event.inputs.stage }}.conf
          COAP_PROVISIONING_SERVER_FRAGMENT=$FRAGMENT_DIR/stages_provisioning/coap_${{ inputs.stage || github.event.inputs.stage }}.conf
          HTTP_PROVISIONING_SERVER_FRAGMENT=$FRAGMENT_DIR/stages_provisioning/http_${{ inputs.stage || github.event.inputs.stage }}.conf
          DEBUG_LOGS_FRAGMENT=$FRAGMENT_DIR/debug_logs.conf
          MODEM_LOG_FRAGMENT=$FRAGMENT_DIR/modem_log.conf
          VERBOSE_ALERT_FRAGMENT=$FRAGMENT_DIR/verbose_alert.conf
          MSS_AGNSS_ONLY_FRAGMENT=$FRAGMENT_DIR/mss_agnss_only.conf
          BINARY_LOGS_FRAGMENT=$FRAGMENT_DIR/binary_logs.conf
          COAP_FOTA_APP_FRAGMENT=$FRAGMENT_DIR/coap_fota_app.conf
          COAP_FOTA_BOOT_FRAGMENT=$FRAGMENT_DIR/coap_fota_boot.conf
          COAP_FOTA_MODEM_FULL_FRAGMENT=$FRAGMENT_DIR/coap_fota_modem_full.conf
          MSS_PGPS_ONLY_FRAGMENT=$FRAGMENT_DIR/mss_pgps_only.conf
          COAP_PROVISIONING_FRAGMENT=$FRAGMENT_DIR/coap_provisioning.conf
          # Thingy:91 X
          west build -b thingy91x/nrf9151/ns --build-dir build-${{ env.VERSION }}/thingy91x/nrf_cloud_coap_device_message        nrf/samples/cellular/nrf_cloud_coap_device_message  -- -DEXTRA_CONF_FILE=$CI_CONFIG_FRAGMENT
          west build -b thingy91x/nrf9151/ns --build-dir build-${{ env.VERSION }}/thingy91x/nrf_cloud_coap_cell_location         nrf/samples/cellular/nrf_cloud_coap_cell_location   -- -DEXTRA_CONF_FILE=$CI_CONFIG_FRAGMENT
          west build -b thingy91x/nrf9151/ns --build-dir build-${{ env.VERSION }}/thingy91x/nrf_cloud_coap_fota                  nrf/samples/cellular/nrf_cloud_coap_fota            -- -DEXTRA_CONF_FILE=$CI_CONFIG_FRAGMENT
          west build -b thingy91x/nrf9151/ns --build-dir build-${{ env.VERSION }}/thingy91x/nrf_cloud_coap_fota_fmfu             nrf/samples/cellular/nrf_cloud_coap_fota            -- -DEXTRA_CONF_FILE="full_modem_fota.conf;$CI_CONFIG_FRAGMENT"
          # nRF9160-DK
          west build -b nrf9160dk/nrf9160/ns       --build-dir build-${{ env.VERSION }}/nrf9160dk/nrf_cloud_multi_service_coap_agnss_only      nrf/samples/cellular/nrf_cloud_multi_service   -- -DEXTRA_CONF_FILE="overlay_coap.conf;$CI_CONFIG_FRAGMENT;$DEBUG_LOGS_FRAGMENT;$MODEM_LOG_FRAGMENT;$VERBOSE_ALERT_FRAGMENT;$MSS_AGNSS_ONLY_FRAGMENT"
          west build -b nrf9160dk/nrf9160/ns       --build-dir build-${{ env.VERSION }}/nrf9160dk/nrf_cloud_multi_service_coap_binary_log      nrf/samples/cellular/nrf_cloud_multi_service   -- -DEXTRA_CONF_FILE="overlay_coap.conf;overlay_nrfcloud_logging.conf;$CI_CONFIG_FRAGMENT;$DEBUG_LOGS_FRAGMENT;$VERBOSE_ALERT_FRAGMENT;$BINARY_LOGS_FRAGMENT"
          west build -b nrf9160dk/nrf9160/ns       --build-dir build-${{ env.VERSION }}/nrf9160dk/nrf_cloud_multi_service_coap_fota_app_a      nrf/samples/cellular/nrf_cloud_multi_service   -- -DEXTRA_CONF_FILE="overlay_coap.conf;$CI_CONFIG_FRAGMENT;$DEBUG_LOGS_FRAGMENT;$MODEM_LOG_FRAGMENT;$VERBOSE_ALERT_FRAGMENT;$COAP_FOTA_APP_FRAGMENT"
          west build -b nrf9160dk/nrf9160/ns       --build-dir build-${{ env.VERSION }}/nrf9160dk/nrf_cloud_multi_service_coap_fota_app_b      nrf/samples/cellular/nrf_cloud_multi_service   -- -DEXTRA_CONF_FILE="overlay_coap.conf;$CI_CONFIG_FRAGMENT;$DEBUG_LOGS_FRAGMENT;$MODEM_LOG_FRAGMENT;$VERBOSE_ALERT_FRAGMENT;$COAP_FOTA_APP_FRAGMENT" '-DCONFIG_APP_VERSION="1.0.0-FOTA-TEST"'
          west build -b nrf9160dk/nrf9160/ns       --build-dir build-${{ env.VERSION }}/nrf9160dk/nrf_cloud_multi_service_coap_fota_boot_a     nrf/samples/cellular/nrf_cloud_multi_service   -- -DEXTRA_CONF_FILE="overlay_coap.conf;$CI_CONFIG_FRAGMENT;$DEBUG_LOGS_FRAGMENT;$MODEM_LOG_FRAGMENT;$VERBOSE_ALERT_FRAGMENT;$COAP_FOTA_BOOT_FRAGMENT" -DCONFIG_FW_INFO_FIRMWARE_VERSION=4 -DSB_CONFIG_SECURE_BOOT_APPCORE=y
          west build -b nrf9160dk/nrf9160/ns       --build-dir build-${{ env.VERSION }}/nrf9160dk/nrf_cloud_multi_service_coap_fota_boot_b     nrf/samples/cellular/nrf_cloud_multi_service   -- -DEXTRA_CONF_FILE="overlay_coap.conf;$CI_CONFIG_FRAGMENT;$DEBUG_LOGS_FRAGMENT;$MODEM_LOG_FRAGMENT;$VERBOSE_ALERT_FRAGMENT;$COAP_FOTA_BOOT_FRAGMENT" -DCONFIG_FW_INFO_FIRMWARE_VERSION=5 -DSB_CONFIG_SECURE_BOOT_APPCORE=y
          west build -b nrf9160dk@1.1.0/nrf9160/ns --build-dir build-${{ env.VERSION }}/nrf9160dk/nrf_cloud_multi_service_coap_fota_modem_full nrf/samples/cellular/nrf_cloud_multi_service   -- -DEXTRA_CONF_FILE="overlay_full_modem_fota.conf;overlay_coap.conf;$CI_CONFIG_FRAGMENT;$DEBUG_LOGS_FRAGMENT;$MODEM_LOG_FRAGMENT;$VERBOSE_ALERT_FRAGMENT;$COAP_FOTA_MODEM_FULL_FRAGMENT"
          west build -b nrf9160dk/nrf9160/ns       --build-dir build-${{ env.VERSION }}/nrf9160dk/nrf_cloud_multi_service_coap_min             nrf/samples/cellular/nrf_cloud_multi_service   -- -DEXTRA_CONF_FILE="overlay_min_coap.conf;$CI_CONFIG_FRAGMENT"
          west build -b nrf9160dk/nrf9160/ns       --build-dir build-${{ env.VERSION }}/nrf9160dk/nrf_cloud_multi_service_coap_no_gnss         nrf/samples/cellular/nrf_cloud_multi_service   -- -DEXTRA_CONF_FILE="overlay_coap.conf;$CI_CONFIG_FRAGMENT;$DEBUG_LOGS_FRAGMENT;$MODEM_LOG_FRAGMENT;$VERBOSE_ALERT_FRAGMENT" -DCONFIG_LOCATION_METHOD_GNSS=n
          west build -b nrf9160dk/nrf9160/ns       --build-dir build-${{ env.VERSION }}/nrf9160dk/nrf_cloud_multi_service_coap_pgps_only       nrf/samples/cellular/nrf_cloud_multi_service   -- -DEXTRA_CONF_FILE="overlay_coap.conf;$CI_CONFIG_FRAGMENT;$DEBUG_LOGS_FRAGMENT;$MODEM_LOG_FRAGMENT;$VERBOSE_ALERT_FRAGMENT;$MSS_PGPS_ONLY_FRAGMENT"
          west build -b nrf9160dk/nrf9160/ns       --build-dir build-${{ env.VERSION }}/nrf9160dk/nrf_cloud_multi_service_coap_text_log        nrf/samples/cellular/nrf_cloud_multi_service   -- -DEXTRA_CONF_FILE="overlay_coap.conf;overlay_nrfcloud_logging.conf;$CI_CONFIG_FRAGMENT;$DEBUG_LOGS_FRAGMENT;$VERBOSE_ALERT_FRAGMENT"
          # nRF9151-DK
          west build -b nrf9151dk/nrf9151/ns       --build-dir build-${{ env.VERSION }}/nrf9151dk/nrf_cloud_multi_service_coap_onboard_coap    nrf/samples/cellular/nrf_cloud_multi_service   -- -DEXTRA_CONF_FILE="overlay-coap_nrf_provisioning.conf;overlay_coap.conf;$CI_CONFIG_FRAGMENT;$DEBUG_LOGS_FRAGMENT;$MODEM_LOG_FRAGMENT;$VERBOSE_ALERT_FRAGMENT;$COAP_PROVISIONING_FRAGMENT;$COAP_PROVISIONING_SERVER_FRAGMENT"
          west build -b nrf9151dk/nrf9151/ns       --build-dir build-${{ env.VERSION }}/nrf9151dk/nrf_cloud_multi_service_coap_onboard_http    nrf/samples/cellular/nrf_cloud_multi_service   -- -DEXTRA_CONF_FILE="overlay-http_nrf_provisioning.conf;overlay_coap.conf;$CI_CONFIG_FRAGMENT;$DEBUG_LOGS_FRAGMENT;$MODEM_LOG_FRAGMENT;$VERBOSE_ALERT_FRAGMENT;$COAP_PROVISIONING_FRAGMENT;$HTTP_PROVISIONING_SERVER_FRAGMENT"


      - name: Create Artifact bundle
        if: steps.cache-check.outputs.cache-hit == 'false'
        working-directory: build-${{ env.VERSION }}
        run: |
          # script                                            sample name                     build dir                                               target dir
          bash ../nrf-cloud-fw-ci/scripts/copy_artifacts.sh   nrf_cloud_coap_device_message   thingy91x/nrf_cloud_coap_device_message                 artifacts/thingy91x
          bash ../nrf-cloud-fw-ci/scripts/copy_artifacts.sh   nrf_cloud_coap_cell_location    thingy91x/nrf_cloud_coap_cell_location                  artifacts/thingy91x
          bash ../nrf-cloud-fw-ci/scripts/copy_artifacts.sh   nrf_cloud_coap_fota             thingy91x/nrf_cloud_coap_fota                           artifacts/thingy91x
          bash ../nrf-cloud-fw-ci/scripts/copy_artifacts.sh   nrf_cloud_coap_fota             thingy91x/nrf_cloud_coap_fota_fmfu                      artifacts/thingy91x
          bash ../nrf-cloud-fw-ci/scripts/copy_artifacts.sh   nrf_cloud_multi_service         nrf9160dk/nrf_cloud_multi_service_coap_agnss_only       artifacts/nrf9160dk
          bash ../nrf-cloud-fw-ci/scripts/copy_artifacts.sh   nrf_cloud_multi_service         nrf9160dk/nrf_cloud_multi_service_coap_binary_log       artifacts/nrf9160dk
          bash ../nrf-cloud-fw-ci/scripts/copy_artifacts.sh   nrf_cloud_multi_service         nrf9160dk/nrf_cloud_multi_service_coap_fota_app_a       artifacts/nrf9160dk
          bash ../nrf-cloud-fw-ci/scripts/copy_artifacts.sh   nrf_cloud_multi_service         nrf9160dk/nrf_cloud_multi_service_coap_fota_app_b       artifacts/nrf9160dk
          bash ../nrf-cloud-fw-ci/scripts/copy_artifacts.sh   nrf_cloud_multi_service         nrf9160dk/nrf_cloud_multi_service_coap_fota_boot_a      artifacts/nrf9160dk
          bash ../nrf-cloud-fw-ci/scripts/copy_artifacts.sh   nrf_cloud_multi_service         nrf9160dk/nrf_cloud_multi_service_coap_fota_boot_b      artifacts/nrf9160dk
          bash ../nrf-cloud-fw-ci/scripts/copy_artifacts.sh   nrf_cloud_multi_service         nrf9160dk/nrf_cloud_multi_service_coap_fota_modem_full  artifacts/nrf9160dk
          bash ../nrf-cloud-fw-ci/scripts/copy_artifacts.sh   nrf_cloud_multi_service         nrf9160dk/nrf_cloud_multi_service_coap_min              artifacts/nrf9160dk
          bash ../nrf-cloud-fw-ci/scripts/copy_artifacts.sh   nrf_cloud_multi_service         nrf9160dk/nrf_cloud_multi_service_coap_no_gnss          artifacts/nrf9160dk
          bash ../nrf-cloud-fw-ci/scripts/copy_artifacts.sh   nrf_cloud_multi_service         nrf9160dk/nrf_cloud_multi_service_coap_pgps_only        artifacts/nrf9160dk
          bash ../nrf-cloud-fw-ci/scripts/copy_artifacts.sh   nrf_cloud_multi_service         nrf9160dk/nrf_cloud_multi_service_coap_text_log         artifacts/nrf9160dk
          bash ../nrf-cloud-fw-ci/scripts/copy_artifacts.sh   nrf_cloud_multi_service         nrf9151dk/nrf_cloud_multi_service_coap_onboard_coap     artifacts/nrf9151dk
          bash ../nrf-cloud-fw-ci/scripts/copy_artifacts.sh   nrf_cloud_multi_service         nrf9151dk/nrf_cloud_multi_service_coap_onboard_http     artifacts/nrf9151dk
          cp artifacts/nrf9160dk/nrf_cloud_multi_service_coap_fota_app_a artifacts/nrf9160dk/nrf_cloud_multi_service_coap_fota_modem_delta

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ env.VERSION }}
          path: build-${{ env.VERSION }}/artifacts
          retention-days: 7


      # copy artifacts to cache, make sure only 10 builds are cached at the same time
      - name: Cache Artifacts
        if: steps.cache-check.outputs.cache-hit == 'false'
        run: |
          mkdir -p artifact-cache
          ls -dt artifact-cache/*/ 2>/dev/null | tail -n +10 | xargs -d '\n' rm -rf -- 2>/dev/null || true
          cp -r build-${{ env.VERSION }}/artifacts artifact-cache/build-${{ env.VERSION }}
