name: On-Target Tests

on:
  workflow_call:
    inputs:
      stage:
        description: 'Stage to build'
        required: true
        default: 'prod'
        type: string
      ncs-commit:
        description: 'NCS commit to build'
        required: true
        default: 'main'
        type: string
      device:
        description: 'Device to build for'
        required: true
        default: 'thingy91x'
        type: string
      recover_device:
        description: 'Recover device before testing'
        required: true
        default: false
        type: boolean
  workflow_dispatch:
    inputs:
      stage:
        description: 'Stage to build'
        required: true
        default: 'prod'
        type: string
      ncs-commit:
        description: 'NCS commit to build'
        required: true
        default: 'main'
        type: string
      device:
        description: 'Device to build for'
        required: true
        default: 'thingy91x'
        type: string
      recover_device:
        description: 'Recover device before testing'
        required: true
        default: false
        type: boolean

jobs:
  build:
    uses: ./.github/workflows/build.yml
    secrets: inherit
    with:
      stage: ${{ inputs.stage }}
      ncs-commit: ${{ inputs.ncs-commit }}
      device: ${{ inputs.device }}

  target_test:
    # Self-hosted runner is labeled according to the device it is linked with
    runs-on: nrfcloudfw_${{ inputs.device }}
    environment: ${{ inputs.device }}
    name: Target Test - ${{ inputs.device }}
    needs: build
    permissions:
      actions: read
      contents: write
      packages: read
    container:
      image: ghcr.io/nrfconnect/asset-tracker-template:test-docker-v1.0.1
      options: --privileged
      volumes:
        - /dev:/dev:rw
        - /run/udev:/run/udev
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          path: nrf-cloud-fw-ci

      - name: Clean up old artifacts
        run: |
          rm -rf nrf-cloud-fw-ci/tests/on_target/artifacts || true

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: nrf-cloud-fw-ci/tests/on_target/artifacts
          run-id: ${{ needs.build.outputs.run_id }}
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Verify artifact path
        working-directory: nrf-cloud-fw-ci
        shell: bash
        run: |
          cd tests/on_target/artifacts/build-*-${{ inputs.device }}
          ls -l
          echo ARTIFACT_PATH=$PWD >> $GITHUB_ENV
          echo ARTIFACT_VERSION=$(basename $PWD | cut -d'-' -f2-5) >> $GITHUB_ENV

      - name: Display Run Details
        # The serial number is set by a pre-job script in .env file on the local actions-runner directory
        run: |
          echo "Inside Container - Runner Serial Number: $RUNNER_SERIAL_NUMBER"
          echo "Inside Container - Runner Serial Number: ${{ env.RUNNER_SERIAL_NUMBER }}"
          echo "stage=${{ inputs.stage }}"
          echo "ncs-commit=${{ inputs.ncs-commit }}"
          echo "artifact_version=${{ env.ARTIFACT_VERSION }}"
          echo "device=${{ inputs.device }}"
          echo "recover_device=${{ inputs.recover_device }}"

      - name: Install dependencies
        working-directory: nrf-cloud-fw-ci
        run: |
          pip install -r tests/on_target/requirements.txt --break-system-packages
          apt-get update && apt-get install -y gnupg
          gpg --import scripts/nrf-cloud-ci-pub.pgp

      - name: Select API KEY by stage
        id: select_api_key
        shell: bash
        run: |
          if [[ "${{ inputs.stage }}" == "prod" ]]; then
            echo "NRFCLOUD_API_KEY=${{ secrets.API_KEY_PROD }}" >> $GITHUB_ENV
            echo "NRFCLOUD_URL=nrfcloud.com" >> $GITHUB_ENV
          fi
          if [[ "${{ inputs.stage }}" == "beta" ]]; then
            echo "NRFCLOUD_API_KEY=${{ secrets.API_KEY_BETA }}" >> $GITHUB_ENV
            echo "NRFCLOUD_URL=beta.nrfcloud.com" >> $GITHUB_ENV
          fi
          if [[ "${{ inputs.stage }}" == "dev" ]]; then
            echo "NRFCLOUD_API_KEY=${{ secrets.API_KEY_DEV }}" >> $GITHUB_ENV
            echo "NRFCLOUD_URL=dev.nrfcloud.com" >> $GITHUB_ENV
          fi

      - name: Recover device
        if: inputs.recover_device == true
        shell: bash
        working-directory: nrf-cloud-fw-ci
        run: |
          if [[ "${{ inputs.device }}" == "thingy91x" ]]; then
            python3 tests/on_target/utils/nrf91_flasher.py -e -u ${{ env.RUNNER_SERIAL_NUMBER }} --program provision_device/t91x-nrf91-bl.hex --modem provision_device/mfw_nrf91x1_2.0.2.zip
            python3 tests/on_target/utils/nrf91_flasher.py -u ${{ env.RUNNER_SERIAL_NUMBER }} --program provision_device/t91x-atclient-apponly.hex
            nrfcredstore $(realpath "/dev/serial/by-id/usb-Nordic_Semiconductor_Thingy:91_X_UART_${{ env.RUNNER_SERIAL_NUMBER }}-if01") list
          fi
          if [[ "${{ inputs.device }}" == "thingy91" ]]; then
            python3 tests/on_target/utils/nrf91_flasher.py -e -u ${{ env.RUNNER_SERIAL_NUMBER }} --program provision_device/thingy91_at_client_2024-11-18_a2386bfc.hex --modem provision_device/mfw_nrf9160_1.3.7.zip
            nrfcredstore $(realpath "/dev/serial/by-id/usb-Nordic_Semiconductor_Thingy:91_UART_${{ env.RUNNER_SERIAL_NUMBER }}-if01") list
          fi
          if [[ "${{ inputs.device }}" == "nrf9160dk" ]]; then
            nrfutil device recover --serial-number ${{ env.RUNNER_SERIAL_NUMBER }}
            nrfutil device program --serial-number ${{ env.RUNNER_SERIAL_NUMBER }} --firmware provision_device/mfw_nrf9160_1.3.7.zip
            nrfutil device program --serial-number ${{ env.RUNNER_SERIAL_NUMBER }} --firmware provision_device/nrf9160dk_at_client_2025-05-08_3bfc4657.hex
            nrfutil device reset --serial-number ${{ env.RUNNER_SERIAL_NUMBER }}
          fi
          if [[ "${{ inputs.device }}" == "nrf9151dk" ]]; then
            nrfutil device recover --serial-number ${{ env.RUNNER_SERIAL_NUMBER }}
            nrfutil device program --serial-number ${{ env.RUNNER_SERIAL_NUMBER }} --firmware provision_device/mfw_nrf91x1_2.0.2.zip
            nrfutil device program --serial-number ${{ env.RUNNER_SERIAL_NUMBER }} --firmware provision_device/nrf9151dk_at_client_2025-08-14_6c6e5b32.hex
            nrfutil device reset --serial-number ${{ env.RUNNER_SERIAL_NUMBER }}
          fi

      - name: Target Tests
        working-directory: nrf-cloud-fw-ci/tests/on_target
        shell: bash
        env:
          SEGGER: ${{ env.RUNNER_SERIAL_NUMBER }}
          UUID: ${{ env.UUID }}
          NRFCLOUD_API_KEY: ${{ env.NRFCLOUD_API_KEY }}
          LOG_FILENAME: nrfcloud_fw_test_log
          TEST_REPORT_NAME: Firmware Test Report
          ARTIFACT_PATH: ${{ env.ARTIFACT_PATH }}
          BASEURL: ${{ env.NRFCLOUD_URL }}
        run: |
          rm -rf results outcomes || true
          mkdir -p results
          mkdir -p outcomes
          PYTEST_PATH=tests/test_functional

          pytest -v "${pytest_marker[@]}" \
            --junit-xml=results/test-results.xml \
            --html=results/test-results.html --self-contained-html \
            ${PYTEST_PATH}

      - name: Encrypt modem traces
        if: always()
        working-directory: nrf-cloud-fw-ci
        run: |
          for file in tests/on_target/outcomes/*.bin; do
            bash scripts/encrypt_file.sh "$file" && rm "$file"
          done

      - name: Results
        if: always()
        uses: pmeier/pytest-results-action@v0.7.1
        with:
          path: nrf-cloud-fw-ci/tests/on_target/results/*.xml
          summary: true
          fail-on-empty: true
          title: FW Test Results - ${{ inputs.device }}

      - name: Create Report Artifact
        if: always()
        uses: actions/upload-artifact@v4
        id: artifact-report
        with:
          name: test-report-${{ env.ARTIFACT_VERSION }}
          path: |
            nrf-cloud-fw-ci/tests/on_target/results/*.html
            nrf-cloud-fw-ci/tests/on_target/outcomes/*.gpg
            nrf-cloud-fw-ci/tests/on_target/outcomes/logs/*.txt
